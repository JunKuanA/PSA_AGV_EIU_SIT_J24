/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package psa_agv_eiu_debug;

import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.HashMap;
import module.process.*;
import org.apache.log4j.Logger;
import org.eclipse.milo.opcua.sdk.client.OpcUaClient;
import com.psa.gtosplus.esb.client.ESBClient;
import com.psa.gtosplus.esb.client.IESBClientEventListener;
import com.psa.gtosplus.esb.client.exception.ESBClientException;
import module.config.ConfigSetup;
import module.config.ConfigWago;
import module.config.createOpcuaClient;
import module.entities.persistenceManager;
import org.eclipse.milo.opcua.sdk.client.api.identity.AnonymousProvider;
import org.eclipse.milo.opcua.sdk.client.api.subscriptions.UaSubscription;
import org.eclipse.milo.opcua.sdk.client.api.subscriptions.UaSubscriptionManager;
import org.eclipse.milo.opcua.stack.core.UaException;
import org.eclipse.milo.opcua.stack.core.security.SecurityPolicy;
import org.eclipse.milo.opcua.stack.core.types.builtin.LocalizedText;
import org.eclipse.milo.opcua.stack.core.types.builtin.StatusCode;
import org.eclipse.milo.opcua.stack.core.types.builtin.unsigned.UInteger;
import static module.Subscribenode.multipleSubscribe.handlerNode;

public class App {

    private static final Logger logger = Logger.getLogger(App.class.getName());
    private static ESBClient esbClient;
    private static createOpcuaClient createOPCUAClient;
    private static String endPointUrl = null;

    private static OpcUaClient createClient() throws Exception {
        //opc ua client endpoint url

        Path securityTempDir = Paths.get(System.getProperty("java.io.tmpdir"), "security");
        Files.createDirectories(securityTempDir);
        if (!Files.exists(securityTempDir)) {
            throw new Exception("unable to create security dir: " + securityTempDir);
        }
        return OpcUaClient.create(endPointUrl,
                endpoints ->
                        endpoints.stream()
                                .filter(e -> e.getSecurityPolicyUri().equals(SecurityPolicy.None.getUri()))
                                .findFirst(),
                configBuilder ->
                        configBuilder
                                .setApplicationName(LocalizedText.english("eclipse milo opc-ua client"))
                                .setApplicationUri("urn:eclipse:milo:examples:client")
                                //anonymous/user password
                                .setIdentityProvider(new AnonymousProvider())
                                .setRequestTimeout(UInteger.valueOf(500))
                                .build()
        );
    }
    /**
     * custom subscription listener
     * reconnect
     */
    private static class CustomSubscriptionListener implements UaSubscriptionManager.SubscriptionListener {

        private OpcUaClient client;

        CustomSubscriptionListener(OpcUaClient client) {
            this.client = client;
        }

        public void onStatusChanged(UaSubscription subscription, StatusCode status) {
            logger.info("onStatusChanged");
        }

        public void onPublishFailure(UaException exception) {
            logger.info("onPublishFailure");
        }

        public void onNotificationDataLost(UaSubscription subscription) {
            logger.info("onNotificationDataLost");
        }

        /**
         * when reconnect and try to recover fails, use this method
         * @param uaSubscription subscribe
         * @param statusCode status
         */
        public void onSubscriptionTransferFailed(UaSubscription uaSubscription, StatusCode statusCode) {
            logger.info("Reconnect fails, need subscribe again");
            //subscribe again
            handlerNode(client,"");
        }
    }

    public static void main(String[] args) throws ESBClientException,Exception {
        logger.trace("Main - Start Primary EIU Application...");
        ConfigSetup.setup();
        endPointUrl= ConfigWago.getOPCUAUrl();
        esbClient = new ESBClient();
        persistenceManager persistenceManager = new persistenceManager();
        HashMap<String, Object> hmDbParam = new HashMap<>();
        Wago wago = new Wago();
        OpcUaClient client = createClient();
        client.connect().get();

        // String jcUpdSt_payloadX= "{\"gtosplus_ops_header\":{"+
        //     "\"source_m\":\"TJCS\","+
        //     "\"event_dt\":\"2023-04-28T17:27:18.001\","+
        //     "\"event_id\":\"Manual-JC3-20230428T172718-001\","+
        //     "\"trans_id\":\"JC_UPD_ST\"},"+
        //     "\"gtosplus_ops_body\":{"+
        //     "\"jc_id\":1903700003,"+
        //     "\"jc_m\":\"TJ003\","+
        //     "\"new_jc_status_c\":\"PM_red\"}"+
        //     "}";
        // // // logger.info("trans_id : " + transId + ", payload_x : " + payloadX);
        // ProcessMsg eiuProcessStep1 = new ProcessMsg(esbClient, persistenceManager,hmDbParam,client,wago);
        // // // // // ProcessMsg eiuProcessStep1 = new ProcessMsg(esbClient, persistenceManager,hmDbParam);
        // eiuProcessStep1.onMessageReceived("JC_UPD_ST", jcUpdSt_payloadX);

        // String tjChgModeR_payloadX= "{\"gtosplus_ops_header\":{"+
        //     "\"source_m\":\"TJCS\","+
        //     "\"event_dt\":\"2023-04-28T17:27:18.001\","+
        //     "\"event_id\":\"Manual-JC3-20230428T172718-001\","+
        //     "\"trans_id\":\"TJ_CHG_MODE_R\"},"+
        //     "\"gtosplus_ops_body\":{"+
        //         "\"error_c\":\"OK\","+
        //         "\"error_txt\":\"\","+
        //     "\"tj_id\":1903700003,"+
        //     "\"tj_m\":\"TJ003\","+
        //     "\"curr_tj_mode_c\":\"MI\"}"+
        //     "}";
        // // // logger.info("trans_id : " + transId + ", payload_x : " + payloadX);
        // // ProcessMsg eiuProcessStep2 = new ProcessMsg2(esbClient, persistenceManager,hmDbParam,client,wago);
        // // // // ProcessMsg eiuProcessStep1 = new ProcessMsg(esbClient, persistenceManager,hmDbParam);
        // // eiuProcessStep2.onMessageReceived("TJ_CHG_MODE_R", tjChgModeR_payloadX);
        // // ProcessMsg eiuProcessStep1 = new ProcessMsg(esbClient, persistenceManager,hmDbParam,client,wago);
        // // // // // ProcessMsg eiuProcessStep1 = new ProcessMsg(esbClient, persistenceManager,hmDbParam);
        // // eiuProcessStep1.onMessageReceived("JC_UPD_ST", jcUpdSt_payloadX);
        // ProcessMsg2 eiuProcessStep2 = new ProcessMsg2(esbClient, persistenceManager,hmDbParam,client,wago);
        // eiuProcessStep2.onMessageReceived2("TJ_CHG_MODE_R", tjChgModeR_payloadX);

    //    Thread 1 - Publish Heartbeat to Database (Always Run)
       HBPublishThread hbPublishThread = new HBPublishThread(persistenceManager,client);
       hbPublishThread.start();

        //Thread 2 - Heartbeat check from database (Always Run)
       HBCheck hbCheckThread = new HBCheck(persistenceManager,esbClient,client,wago);
        //HBCheck hbCheckThread = new HBCheck(persistenceManager,esbClient);
       hbCheckThread.start();
       

        // Thread 3 - Alarm check from OPCUA (Always Run)
        AlarmPubThread alarmPubThread = new AlarmPubThread(persistenceManager,esbClient,hmDbParam,client,wago);
        //AlarmPubThread alarmPubThread = new AlarmPubThread(persistenceManager, hmDbParam,client);
        alarmPubThread.start();

        //Thread 4 - Loop detection card check from OPCUA (Always Run)
       LoopDetection loopDetectionThread = new LoopDetection(persistenceManager, esbClient,hmDbParam,client);
        // LoopDetection loopDetectionThread = new LoopDetection(persistenceManager, hmDbParam, client);
        loopDetectionThread.start();

        // Thread 5 - Heap Memory Check (Always Run)
       HeapMemoryCheck heapMemoryCheckThread = new HeapMemoryCheck();
       heapMemoryCheckThread.start();

        // Thread 6 - ENQPublishInfo (Always Run)
       EnqPushInfoThread enqpushinfothread = new EnqPushInfoThread(persistenceManager, esbClient,hmDbParam,client,wago);
       enqpushinfothread.start();

       //Thread 7 - Loop detection card detected check from OPCUA (Always Run)
       LoopDetectionDtec loopDetectionDecThread = new LoopDetectionDtec(persistenceManager, esbClient,hmDbParam,client);
       // LoopDetection loopDetectionThread = new LoopDetection(persistenceManager, hmDbParam, client);
       loopDetectionDecThread.start();

         esbClient.setClientEventListener(new IESBClientEventListener() {
             @Override
             public void onMessageReceived(String transId, String payloadX) {
                 
                //  ProcessMsg2 eiuProcessStep2 = new ProcessMsg2(esbClient, persistenceManager,hmDbParam,client,wago);
                //  ProcessMsg eiuProcessStep1 = new ProcessMsg(esbClient, persistenceManager,hmDbParam,client,wago);
                //  logger.info("trans_id : " + transId + ", payload_x : " + payloadX);
                //  if(transId.equalsIgnoreCase(ConfigWago.getEsbTjChgModeR())){
                //     eiuProcessStep2.onMessageReceived2(transId, payloadX);
                //  }else{
                //     eiuProcessStep1.onMessageReceived(transId, payloadX);
                //  }
                ProcessMsg eiuProcessStep1 = new ProcessMsg(esbClient, persistenceManager,hmDbParam,client,wago);
                eiuProcessStep1.onMessageReceived(transId, payloadX);
             }

             @Override
             public void onMessageReceived(String transId, byte[] payloadX) {
                 logger.info("trans_id : " + transId);
                 logger.info("payload_x : " + Arrays.toString(payloadX));
             }

             @Override
             public void onMessageReceived(String transId, String payloadX, String correlationID) {
                 logger.info("trans_id :  " + transId);
                 logger.info("payload_x :  " + payloadX);
                 logger.info("correlation_ID : " + correlationID);
             }

             @Override
             public void onMessageReceived(String transId, byte[] payloadX, String correlationID) {
                 logger.info("trans_id :  " + transId);
                 logger.info("payload_x :  " + Arrays.toString(payloadX));
                 logger.info("correlation_ID : " + correlationID);
             }
         });
         if (esbClient.startEsbClient() != 0) {
             //System.exit(1);
             logger.error("Failed to send message, esbClient.startEsbClient(): " + esbClient.startEsbClient() + ", reconnection attempted");
             esbClient.stopEsbClient();
             esbClient.startEsbClient();
         }
         
         logger.info("EIU primary started");

        Runtime.getRuntime().addShutdownHook(new Thread((Runnable) () -> {
            heapMemoryCheckThread.stop();
            loopDetectionThread.stop();
            loopDetectionDecThread.stop();
            persistenceManager.closePersistenceConnection();
            alarmPubThread.stop();
            hbCheckThread.stop();
            hbPublishThread.stop();
            enqpushinfothread.stop();
            hmDbParam.clear();
            if (esbClient != null) {
                esbClient.stopEsbClient();
            }
            System.gc();
            Runtime.getRuntime().gc();
            logger.trace("Main - Stop EIU Application...");
        }, "ShutdownHook-thread"));
    }
}
